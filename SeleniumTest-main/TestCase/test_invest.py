
#前置条件  独立测试账号
#用户一登录
#用户账户有余额可以投资
#   1;一个亿
#   2.接口方式:查询当前用户还有多少钱>6000 不用充值 如果小于用例中的投资的金额 那就充值 尽量不要依赖测试环境数据 尽量自己造数据

#又能够投资的标  如果没有 则加标  自动化加   接口加



#步骤
#1.在首页选标----不根据标名,根据抢投标, 默认第一个标
# 标页面 - 获取一下投资前的用户余额
#
#2 在标页面 输入金额 点击 投标
#标页面 点击投资成功的弹出框  查看并激活  进入个人中心


#断言
#钱 投资后的金额  是不是少了投资的量
#个页面 获取 投资后的金额
#投资钱的金额 - 投资后的金额 = 投资金额
#投资记录对不对  false
#利息对不对  false


#异常用例  非常好创建环境  非常好写的

#异常用例 全段操作 ? 标的可投金额 > 个人余额
# 投资金额 >标的可投金额  找到满足这个条件的标,用户
# 以上两个场景的成本太高,可以选择不做


import unittest

class TestInvest(unittest.TestCase):
    def setUp(self) -> None:
        pass
    def tearDown(self) -> None:
        pass
    def test_invest(self):
# 步骤
# 1.在首页选标----不根据标名,根据抢投标, 默认第一个标
# 标页面 - 获取一下投资前的用户余额
#
# 2 在标页面 输入金额 点击 投标
# 标页面 点击投资成功的弹出框  查看并激活  进入个人中心


# 断言
# 钱 投资后的金额  是不是少了投资的量
# 个页面 获取 投资后的金额
# 投资钱的金额 - 投资后的金额 = 投资金额
# 投资记录对不对  false
# 利息对不对  false
        pass
    def test_invest_no100(self):

        pass

    def test_invest_failed_no10(self):

        pass

    




